name: Security Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Upload Snyk results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  code-security-scan:
    name: Static Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nextjs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t trackflow:test .
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'trackflow:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  security-headers-test:
    name: Security Headers Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://dummy.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'dummy-key' }}

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Wait for app to be ready
        run: npx wait-on http://localhost:3000 --timeout 30000

      - name: Test security headers
        run: |
          # Test Content Security Policy
          curl -I http://localhost:3000 | grep -i "content-security-policy" || exit 1
          
          # Test X-Frame-Options
          curl -I http://localhost:3000 | grep -i "x-frame-options" || exit 1
          
          # Test X-Content-Type-Options
          curl -I http://localhost:3000 | grep -i "x-content-type-options" || exit 1
          
          # Test Strict-Transport-Security (if HTTPS)
          curl -I http://localhost:3000 | grep -i "strict-transport-security" || echo "HSTS not found (expected for HTTP)"
          
          echo "✅ Security headers test passed"

  api-security-test:
    name: API Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install security testing tools
        run: |
          npm install -g @hapi/lab
          npm install -g newman

      - name: Build and start application
        run: |
          npm run build
          npm start &
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://dummy.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'dummy-key' }}

      - name: Wait for API to be ready
        run: npx wait-on http://localhost:3000/api/health --timeout 30000

      - name: Test API security
        run: |
          # Test rate limiting
          echo "Testing rate limiting..."
          for i in {1..10}; do
            curl -s -o /dev/null -w "%{http_code}\n" http://localhost:3000/api/v1/clients
          done
          
          # Test input validation
          echo "Testing input validation..."
          curl -X POST http://localhost:3000/api/v1/clients \
            -H "Content-Type: application/json" \
            -d '{"name": ""}' \
            -w "%{http_code}\n"
          
          # Test SQL injection protection
          echo "Testing SQL injection protection..."
          curl "http://localhost:3000/api/v1/clients?search='; DROP TABLE clients; --" \
            -w "%{http_code}\n"
          
          echo "✅ API security tests passed"

  integration-security-test:
    name: Integration Security Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security integration tests
        run: |
          # Create a simple security test
          cat > security-tests.js << 'EOF'
          const { test } = require('node:test');
          const assert = require('node:assert');
          
          test('Environment variables should not contain secrets', () => {
            // Check that sensitive env vars are not logged or exposed
            const envStr = JSON.stringify(process.env);
            assert(!envStr.includes('password'));
            assert(!envStr.includes('secret'));
            assert(!envStr.includes('private_key'));
          });
          
          test('Package.json should not contain dev dependencies in production', () => {
            const pkg = require('./package.json');
            // In production builds, devDependencies should be excluded
            if (process.env.NODE_ENV === 'production') {
              assert(!pkg.devDependencies || Object.keys(pkg.devDependencies).length === 0);
            }
          });
          
          test('Security headers configuration exists', () => {
            const nextConfig = require('./next.config.js');
            assert(nextConfig.headers, 'Security headers should be configured');
          });
          EOF
          
          node --test security-tests.js

  security-report:
    name: Generate Security Report
    needs: [dependency-scan, code-security-scan, secret-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scans Performed:" >> security-report.md
          echo "- ✅ Dependency vulnerability scan" >> security-report.md
          echo "- ✅ Static code analysis (CodeQL + Semgrep)" >> security-report.md
          echo "- ✅ Secret detection (GitLeaks + TruffleHog)" >> security-report.md
          echo "- ✅ Docker security scan" >> security-report.md
          echo "- ✅ Security headers validation" >> security-report.md
          echo "- ✅ API security testing" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Recommendations:" >> security-report.md
          echo "1. Review any vulnerabilities found in dependency scans" >> security-report.md
          echo "2. Address any secrets detected in code" >> security-report.md
          echo "3. Fix any security issues identified by static analysis" >> security-report.md
          echo "4. Ensure all security headers are properly configured" >> security-report.md
          echo "5. Validate API security measures are working correctly" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

      - name: Comment PR with security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });

  notify-security-team:
    name: Notify Security Team
    needs: [dependency-scan, code-security-scan, secret-scan]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Send security alert
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'security-alert',
              client_payload: {
                message: 'Security scan failed on main branch',
                commit: context.sha,
                workflow_run: context.runId
              }
            });